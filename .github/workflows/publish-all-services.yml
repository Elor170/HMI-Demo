name: Publish All Services

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  versioning:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Bump version and push tag
        if: github.event_name != 'pull_request'
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: minor
      - name: Create a GitHub release
        if: github.event_name != 'pull_request'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

    outputs:
      version: ${{ steps.tag_version.outputs.new_version || '1.0.0'}}

  repo-owner-name:
    runs-on: ubuntu-latest
    outputs:
      lowercase: ${{ steps.toLowerCase.outputs.lowercase }}
    steps:
      - name: Get registry owner name
        id: toLowerCase
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.repository_owner }}

  docker:
    needs: [repo-owner-name, versioning]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - image: hmi-frontend
            context: .
            dockerfile: .docker/Dockerfile.frontend

          - image: streamer-server
            context: .
            dockerfile: .docker/Dockerfile.streamer
            build-args: url=https://drive.google.com/file/d/1r-zZ05GueeKXs-vGYsppoiXQ4lWaIJE8/view

          - image: streamer-logger
            context: .
            dockerfile: .docker/Dockerfile.prod.service
            build-args: ServiceName=streamer-logger

          - image: waterfall-backend
            context: .
            dockerfile: .docker/Dockerfile.prod.service
            build-args: ServiceName=waterfall-backend

          - image: waterfall-streamer
            context: .
            dockerfile: .docker/Dockerfile.prod.service
            build-args: ServiceName=waterfall-streamer

          - image: game-server
            context: .
            dockerfile: .docker/Dockerfile.game-server

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Pull lfs   
        run: git lfs pull

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ needs.repo-owner-name.outputs.lowercase }}/${{ matrix.image }}
          tags: |
            type=semver,pattern={{raw}},version=${{ needs.versioning.outputs.version }}
          flavor: |
            latest=${{ github.event_name != 'pull_request' }}

      - name: Get current image hash from registry
        id: get_current_hash
        run: |
          # Get the hash of the last pushed image from the registry
          docker pull ghcr.io/${{ needs.repo-owner-name.outputs.lowercase }}/${{ matrix.image }}:${{ needs.versioning.outputs.version }} || true
          current_hash=$(docker images ghcr.io/${{ needs.repo-owner-name.outputs.lowercase }}/${{ matrix.image }}:${{ needs.versioning.outputs.version }} --format "{{.ID}}")
          echo "Current image hash: $current_hash"
          echo "current_hash=$current_hash" >> $GITHUB_ENV

      - name: Build Docker image
        id: build_image
        run: |
          # Build the image with the specified Dockerfile
          docker build -f ${{ matrix.dockerfile }} -t ghcr.io/${{ needs.repo-owner-name.outputs.lowercase }}/${{ matrix.image }}:${{ needs.versioning.outputs.version }} .
          new_hash=$(docker images ghcr.io/${{ needs.repo-owner-name.outputs.lowercase }}/${{ matrix.image }}:${{ needs.versioning.outputs.version }} --format "{{.ID}}")
          echo "New image hash: $new_hash"
          echo "new_hash=$new_hash" >> $GITHUB_ENV

      - name: Compare hashes and push if new
        if: ${{ env.current_hash != env.new_hash }}
        run: |
          echo "Hashes are different. Pushing new image."
          docker push ghcr.io/${{ needs.repo-owner-name.outputs.lowercase }}/${{ matrix.image }}:${{ needs.versioning.outputs.version }}
          docker push ghcr.io/${{ needs.repo-owner-name.outputs.lowercase }}/${{ matrix.image }}:latest

      - name: Skip pushing if no changes detected
        if: ${{ env.current_hash == env.new_hash }}
        run: |
          echo "Hashes are the same. Skipping push."
